{"version":3,"file":"static/js/586.747b90e9.chunk.js","mappings":"4PAEe,SAASA,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAClC,OACE,gBACEC,MAAM,MACNC,IACEF,EAAMG,aAAN,yCACsCH,EAAMG,cACxCC,EAENC,IAAKL,EAAMM,MAGhB,C,kCCZYC,E,QAAWC,EAAAA,GAAH,wGCON,SAASC,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,QAArC,eAAOK,EAAP,KAAeC,EAAf,KACMC,GAASC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MAgBjB,OAdAC,EAAAA,EAAAA,YAAU,WACRL,EAAU,YAEVM,EAAAA,EAAAA,IAAcL,EAAOM,SAClBC,MAAK,SAAAC,GACJb,EAAQa,EAAKd,MACbK,EAAU,WACX,IACAU,OAAM,SAAAb,GACLC,EAAS,oCACTE,EAAU,WACX,GACJ,GAAE,CAACC,EAAOM,WAGT,2BACc,YAAXR,IAAwB,SAACY,EAAA,EAAD,IACvBhB,EAAKiB,OAGM,aAAXb,IACE,SAACR,EAAD,UACGI,EAAKkB,KAAI,SAAA7B,GAAK,OACb,yBACE,SAAC,KAAD,CAAS8B,GAAE,kBAAa9B,EAAM+B,IAAMC,MAAO,CAAEC,KAAMd,GAAnD,UACE,SAACpB,EAAD,CAAWC,MAAOA,OAFbA,EAAMkC,QADF,OAJnB,2CAeU,aAAXnB,IAAyB,SAACoB,EAAA,EAAD,CAAcC,QAASvB,MAGtD,C,oEClDc,SAASsB,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,wBAAKA,GACb,C,6ECHYT,EAAS,WACpB,OACE,0BACE,SAAC,IAAD,CAAeU,KAAM,GAAIC,UAAW,GAAIC,MAAO,GAAIC,MAAM,aAG9D,C,kMCLKC,EAAW,+BACXC,EAAU,mCAEVC,EAAa,mCAAG,WAAMC,GAAN,uFACGC,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,qCACmBC,EADnB,iBACmCE,IAFtC,cACdE,EADc,yBAIbA,EAASrB,MAJI,2CAAH,sDAMbsB,EAAW,mCAAG,WAAOC,EAAOJ,GAAd,uFACKC,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,iCACeC,EADf,kBACgCM,EADhC,iBAC8CJ,EAD9C,yBADL,cACZE,EADY,yBAIXA,EAASrB,MAJE,2CAAH,wDAMXwB,EAAc,mCAAG,WAAMlB,GAAN,uFACEc,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,kBACAV,EADA,oBACcW,IAFhB,cACfI,EADe,yBAIdA,EAASrB,MAJK,2CAAH,sDAOdH,EAAa,mCAAG,WAAMS,GAAN,uFACGc,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,kBACAV,EADA,4BACsBW,IAFzB,cACdI,EADc,yBAIbA,EAASrB,MAJI,2CAAH,sDAObyB,EAAgB,mCAAG,WAAMnB,GAAN,uFACAc,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,kBACAV,EADA,4BACsBW,IAFtB,cACjBI,EADiB,yBAIhBA,EAASrB,MAJO,2CAAH,qD","sources":["components/ActorCard/ActorCard.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/ErrorMessage/ErrorMessage.jsx","components/Loader/Loader.jsx","services/fetchApi.jsx"],"sourcesContent":["import NotImage from '../Images/NotImage.jpg';\n\nexport default function ActorCard({ actor }) {\n  return (\n    <img\n      width=\"200\"\n      src={\n        actor.profile_path\n          ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`\n          : NotImage\n      }\n      alt={actor.name}\n    />\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  flex-wrap: wrap;\n`;\n","import { useEffect, useState } from 'react';\nimport { NavLink, useLocation, useParams } from 'react-router-dom';\n\nimport { fetchCastById } from 'services/fetchApi';\nimport ActorCard from 'components/ActorCard/ActorCard';\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\nimport { Loader } from 'components/Loader/Loader';\nimport { CastList } from './Cast.styled';\n\nexport default function Cast() {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState('');\n  const [status, setStatus] = useState('idle');\n  const params = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    setStatus('pending');\n\n    fetchCastById(params.movieId)\n      .then(data => {\n        setCast(data.cast);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setError('Something went wrong. Try again.');\n        setStatus('rejected');\n      });\n  }, [params.movieId]);\n\n  return (\n    <div>\n      {status === 'pending' && <Loader />}\n      {!cast.length ? (\n        <h1>cast not found</h1>\n      ) : (\n        status === 'resolved' && (\n          <CastList>\n            {cast.map(actor => (\n              <li key={actor.cast_id}>\n                <NavLink to={`/actors/${actor.id}`} state={{ from: location }}>\n                  <ActorCard actor={actor} />\n                </NavLink>\n              </li>\n            ))}\n          </CastList>\n        )\n      )}\n\n      {status === 'rejected' && <ErrorMessage message={error} />}\n    </div>\n  );\n}\n","import PropTypes from 'prop-types';\n\nexport default function ErrorMessage({ message }) {\n  return <h1>{message}</h1>;\n}\nErrorMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { SpinnerDotted } from 'spinners-react';\nexport const Loader = () => {\n  return (\n    <div>\n      <SpinnerDotted size={90} thickness={97} speed={38} color=\"#36ad47\" />\n    </div>\n  );\n};\n","import axios from 'axios';\n\nconst MAIN_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e6eac04b3db1d8bf65626de9a2b0d930';\n\nconst fetchTrending = async page => {\n  const response = await axios.get(\n    `${MAIN_URL}/trending/all/day?api_key=${API_KEY}&page=${page}`\n  );\n  return response.data;\n};\nconst fetchMovies = async (query, page) => {\n  const response = await axios.get(\n    `${MAIN_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=${page}&include_adult=false`\n  );\n  return response.data;\n};\nconst fetchMovieById = async id => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${id}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nconst fetchCastById = async id => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nconst fetchReviewsById = async id => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\nexport {\n  fetchTrending,\n  fetchMovieById,\n  fetchCastById,\n  fetchReviewsById,\n  fetchMovies,\n};\n"],"names":["ActorCard","actor","width","src","profile_path","NotImage","alt","name","CastList","styled","Cast","useState","cast","setCast","error","setError","status","setStatus","params","useParams","location","useLocation","useEffect","fetchCastById","movieId","then","data","catch","Loader","length","map","to","id","state","from","cast_id","ErrorMessage","message","size","thickness","speed","color","MAIN_URL","API_KEY","fetchTrending","page","axios","response","fetchMovies","query","fetchMovieById","fetchReviewsById"],"sourceRoot":""}